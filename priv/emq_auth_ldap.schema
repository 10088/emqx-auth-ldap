{mapping, "emq.auth.ldap.servers", "emq_auth_ldap.ldap", [
  {default, "localhost"},
  {datatype, string}
]}.

{mapping, "emq.auth.ldap.port", "emq_auth_ldap.ldap", [
  {default, 389},
  {datatype, integer}
]}.

{mapping, "emq.auth.ldap.timeout", "emq_auth_ldap.ldap", [
  {default, 30},
  {datatype, integer}
]}.

{mapping, "emq.auth.ldap.user_dn", "emq_auth_ldap.ldap", [
  {datatype, string}
]}.

{mapping, "emq.auth.ldap.ssl", "emq_auth_ldap.ldap", [
  {default, false},
  {datatype, {enum, [true, false]}}
]}.

{mapping, "emq.auth.ldap.ssl.certfile", "emq_auth_ldap.ldap", [
  {datatype, string}
]}.

{mapping, "emq.auth.ldap.ssl.keyfile ", "emq_auth_ldap.ldap", [
  {datatype, string}
]}.

{mapping, "emq.auth.ldap.ssl.cacertfile ", "emq_auth_ldap.ldap", [
  {datatype, string}
]}.

{mapping, "emq.auth.ldap.ssl.verify", "emq_auth_ldap.ldap", [
  {default, verify_peer},
  {datatype, atom}
]}.

{mapping, "emq.auth.ldap.ssl.fail_if_no_peer_cert", "emq_auth_ldap.ldap", [
  {default, true},
  {datatype, {enum, [true, false]}}
]}.

{translation, "emq_auth_ldap.ldap", fun(Conf) ->
    Servers = string:tokens(cuttlefish:conf_get("emq.auth.ldap.servers", Conf), ","),
    Port = cuttlefish:conf_get("emq.auth.ldap.port", Conf),
    Timeout = cuttlefish:conf_get("emq.auth.ldap.timeout", Conf),
    Userdn = cuttlefish:conf_get("emq.auth.ldap.user_dn", Conf),
    Opts = [{servers, Servers}, {port, Port}, {timeout, Timeout}, {user_dn, Userdn}],
    case cuttlefish:conf_get("emq.auth.ldap.ssl", Conf) of
        true  -> [{ssl, true}|Opts];
        false -> [{ssl, false}|Opts]
    end
end}.

